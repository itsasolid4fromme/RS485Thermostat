// --- Libraries ---
#include <lvgl.h>
#include <TFT_eSPI.h>          // TFT library for ESP32-S3 screen
#include <OneWire.h>           // For DS18B20
#include <DallasTemperature.h> // For DS18B20
#include <WiFi.h>              // WiFi
#include <PubSubClient.h>      // MQTT

// --- RS485 Definitions ---
#define RS485_TX 13
#define RS485_RX 14
#define RS485_EN 21

HardwareSerial RS485Serial(2);

// --- DS18B20 Setup ---
#define ONE_WIRE_BUS 2
OneWire oneWire(ONE_WIRE_BUS);
DallasTemperature sensors(&oneWire);

// --- LVGL Display Setup ---
TFT_eSPI tft = TFT_eSPI(); // Use TFT_eSPI

// --- WiFi and MQTT Setup ---
const char* ssid = "YOUR_WIFI_SSID";
const char* password = "YOUR_WIFI_PASSWORD";

const char* mqtt_server = "YOUR_MQTT_BROKER_IP"; // Example: 192.168.1.100
const char* mqtt_user = "YOUR_MQTT_USERNAME";    // Or leave "" if not needed
const char* mqtt_password = "YOUR_MQTT_PASSWORD"; // Or leave "" if not needed

WiFiClient espClient;
PubSubClient client(espClient);

// --- Global Variables ---
lv_obj_t *label_current_temp;
lv_obj_t *label_heat_sp;
lv_obj_t *label_cool_sp;
lv_obj_t *label_status;
lv_obj_t *label_fan;
lv_obj_t *label_mode;

uint8_t heatSetpoint = 68;
uint8_t coolSetpoint = 75;
float currentTemp = 72.0;

uint8_t fanMode = 0; // 0=Auto, 1=High, 2=Low
uint8_t globalMode = 3; // Start in Auto

// Mode definitions
#define MODE_OFF  0
#define MODE_COOL 1
#define MODE_HEAT 2
#define MODE_AUTO 3

unsigned long lastSend = 0;
unsigned long lastTempRead = 0;

// --- WiFi Connect ---
void setup_wifi() {
  delay(10);
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(ssid);
  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("WiFi connected");
}

// --- MQTT Connect ---
void reconnect() {
  while (!client.connected()) {
    Serial.print("Attempting MQTT connection...");
    if (client.connect("ESP32Thermostat", mqtt_user, mqtt_password)) {
      Serial.println("connected");
    } else {
      Serial.print("failed, rc=");
      Serial.print(client.state());
      delay(5000);
    }
  }
}

// --- MQTT Publish ---
void mqtt_publish_status() {
  client.publish("thermostat/current_temp", String(currentTemp).c_str(), true);
  client.publish("thermostat/heat_setpoint", String(heatSetpoint).c_str(), true);
  client.publish("thermostat/cool_setpoint", String(coolSetpoint).c_str(), true);
  client.publish("thermostat/mode", String(globalMode).c_str(), true);
}

// --- LVGL Flush ---
void my_disp_flush(lv_disp_drv_t *disp, const lv_area_t *area, lv_color_t *color_p) {
  uint32_t w = (area->x2 - area->x1 + 1);
  uint32_t h = (area->y2 - area->y1 + 1);

  tft.startWrite();
  tft.setAddrWindow(area->x1, area->y1, w, h);
  tft.pushColors((uint16_t *)&color_p->full, w * h, true);
  tft.endWrite();

  lv_disp_flush_ready(disp);
}

// --- RS485 Packet Send ---
void sendRS485Packet() {
  uint8_t packet[] = {
    0xF6,
    (uint8_t)(heatSetpoint + 82),
    zone1Mode(),
    fanModeCode(fanMode),
    (uint8_t)(coolSetpoint + 82),
    zone2Mode(),
    fanModeCode(fanMode),
    0xFF
  };

  digitalWrite(RS485_EN, HIGH);
  delay(2);
  RS485Serial.write(packet, sizeof(packet));
  RS485Serial.flush();
  digitalWrite(RS485_EN, LOW);
}

uint8_t fanModeCode(uint8_t mode) {
  switch (mode) {
    case 0: return 0xD9; // Auto
    case 1: return 0x33; // High
    case 2: return 0xB2; // Low
    default: return 0xD9;
  }
}

// --- Auto Mode Logic ---
uint8_t zone1Mode() {
  if (globalMode == MODE_AUTO) {
    float deadband = 3.0;
    if (currentTemp <= heatSetpoint - deadband) return 0x02; // Heat
    if (currentTemp >= coolSetpoint + deadband) return 0x03; // Cool
    return 0x00; // Off
  } else if (globalMode == MODE_COOL) {
    return 0x03;
  } else if (globalMode == MODE_HEAT) {
    return 0x02;
  }
  return 0x00;
}

uint8_t zone2Mode() {
  if (globalMode == MODE_AUTO) {
    float deadband = 3.0;
    if (currentTemp >= coolSetpoint + deadband) return 0x03;
    return 0x00;
  } else if (globalMode == MODE_COOL) {
    return 0x03;
  }
  return 0x00;
}

// --- UI Update ---
void update_ui() {
  static char temp_buf[32];
  static char heat_buf[32];
  static char cool_buf[32];
  static char status_buf[32];
  static char fan_buf[32];
  static char mode_buf[32];

  snprintf(temp_buf, sizeof(temp_buf), "Room Temp: %.1f°F", currentTemp);
  snprintf(heat_buf, sizeof(heat_buf), "Heat SP: %d°F", heatSetpoint);
  snprintf(cool_buf, sizeof(cool_buf), "Cool SP: %d°F", coolSetpoint);

  uint8_t z1Mode = zone1Mode();
  if (globalMode == MODE_OFF) {
    snprintf(status_buf, sizeof(status_buf), "Status: OFF");
  } else if (z1Mode == 0x02) {
    snprintf(status_buf, sizeof(status_buf), "Status: Heating...");
  } else if (z1Mode == 0x03) {
    snprintf(status_buf, sizeof(status_buf), "Status: Cooling...");
  } else {
    snprintf(status_buf, sizeof(status_buf), "Status: Idle");
  }

  snprintf(fan_buf, sizeof(fan_buf), "Fan: %s", (fanMode == 0) ? "Auto" : (fanMode == 1) ? "High" : "Low");

  const char *modeNames[] = {"Off", "Cool", "Heat", "Auto"};
  snprintf(mode_buf, sizeof(mode_buf), "Mode: %s", modeNames[globalMode]);

  lv_label_set_text(label_current_temp, temp_buf);
  lv_label_set_text(label_heat_sp, heat_buf);
  lv_label_set_text(label_cool_sp, cool_buf);
  lv_label_set_text(label_status, status_buf);
  lv_label_set_text(label_fan, fan_buf);
  lv_label_set_text(label_mode, mode_buf);
}

// --- Button Handlers ---
void heat_up_cb(lv_event_t *e) { heatSetpoint++; update_ui(); }
void heat_down_cb(lv_event_t *e) { heatSetpoint--; update_ui(); }
void cool_up_cb(lv_event_t *e) { coolSetpoint++; update_ui(); }
void cool_down_cb(lv_event_t *e) { coolSetpoint--; update_ui(); }
void mode_toggle_cb(lv_event_t *e) {
  globalMode = (globalMode + 1) % 4;
  update_ui();
}
void fan_toggle_cb(lv_event_t *e) {
  fanMode = (fanMode + 1) % 3;
  update_ui();
}

// --- Create UI ---
void create_ui() {
  lv_obj_t *scr = lv_scr_act();

  label_current_temp = lv_label_create(scr);
  lv_label_set_text(label_current_temp, "Room Temp: --°F");
  lv_obj_align(label_current_temp, LV_ALIGN_TOP_MID, 0, 10);

  label_heat_sp = lv_label_create(scr);
  lv_label_set_text(label_heat_sp, "Heat SP: 68°F");
  lv_obj_align(label_heat_sp, LV_ALIGN_TOP_LEFT, 20, 50);

  lv_obj_t *btn_heat_up = lv_btn_create(scr);
  lv_obj_align(btn_heat_up, LV_ALIGN_TOP_LEFT, 200, 40);
  lv_obj_t *label1 = lv_label_create(btn_heat_up);
  lv_label_set_text(label1, "+");
  lv_obj_add_event_cb(btn_heat_up, heat_up_cb, LV_EVENT_CLICKED, NULL);

  lv_obj_t *btn_heat_down = lv_btn_create(scr);
  lv_obj_align(btn_heat_down, LV_ALIGN_TOP_LEFT, 260, 40);
  lv_obj_t *label2 = lv_label_create(btn_heat_down);
  lv_label_set_text(label2, "-");
  lv_obj_add_event_cb(btn_heat_down, heat_down_cb, LV_EVENT_CLICKED, NULL);

  label_cool_sp = lv_label_create(scr);
  lv_label_set_text(label_cool_sp, "Cool SP: 75°F");
  lv_obj_align(label_cool_sp, LV_ALIGN_TOP_LEFT, 20, 100);

  lv_obj_t *btn_cool_up = lv_btn_create(scr);
  lv_obj_align(btn_cool_up, LV_ALIGN_TOP_LEFT, 200, 90);
  lv_obj_t *label3 = lv_label_create(btn_cool_up);
  lv_label_set_text(label3, "+");
  lv_obj_add_event_cb(btn_cool_up, cool_up_cb, LV_EVENT_CLICKED, NULL);

  lv_obj_t *btn_cool_down = lv_btn_create(scr);
  lv_obj_align(btn_cool_down, LV_ALIGN_TOP_LEFT, 260, 90);
  lv_obj_t *label4 = lv_label_create(btn_cool_down);
  lv_label_set_text(label4, "-");
  lv_obj_add_event_cb(btn_cool_down, cool_down_cb, LV_EVENT_CLICKED, NULL);

  label_status = lv_label_create(scr);
  lv_label_set_text(label_status, "Status: --");
  lv_obj_align(label_status, LV_ALIGN_TOP_LEFT, 20, 150);

  label_mode = lv_label_create(scr);
  lv_label_set_text(label_mode, "Mode: AUTO");
  lv_obj_align(label_mode, LV_ALIGN_TOP_LEFT, 20, 200);

  lv_obj_t *btn_mode = lv_btn_create(scr);
  lv_obj_align(btn_mode, LV_ALIGN_TOP_LEFT, 200, 190);
  lv_obj_t *label5 = lv_label_create(btn_mode);
  lv_label_set_text(label5, "Mode");
  lv_obj_add_event_cb(btn_mode, mode_toggle_cb, LV_EVENT_CLICKED, NULL);

  label_fan = lv_label_create(scr);
  lv_label_set_text(label_fan, "Fan: Auto");
  lv_obj_align(label_fan, LV_ALIGN_TOP_LEFT, 20, 250);

  lv_obj_t *btn_fan = lv_btn_create(scr);
  lv_obj_align(btn_fan, LV_ALIGN_TOP_LEFT, 200, 240);
  lv_obj_t *label6 = lv_label_create(btn_fan);
  lv_label_set_text(label6, "Fan");
  lv_obj_add_event_cb(btn_fan, fan_toggle_cb, LV_EVENT_CLICKED, NULL);

  update_ui();
}

// --- Setup ---
void setup() {
  Serial.begin(115200);

  setup_wifi();
  client.setServer(mqtt_server, 1883);

  // RS485 Setup
  pinMode(RS485_EN, OUTPUT);
  digitalWrite(RS485_EN, LOW);
  RS485Serial.begin(9600, SERIAL_8N1, RS485_RX, RS485_TX);

  // DS18B20 Setup
  sensors.begin();

  // TFT and LVGL Setup
  lv_init();
  tft.begin();
  tft.setRotation(1);
  
  static lv_disp_draw_buf_t draw_buf;
  static lv_color_t buf1[480 * 10];
  lv_disp_draw_buf_init(&draw_buf, buf1, NULL, 480 * 10);

  static lv_disp_drv_t disp_drv;
  lv_disp_drv_init(&disp_drv);
  disp_drv.hor_res = 480;
  disp_drv.ver_res = 320;
  disp_drv.flush_cb = my_disp_flush;
  disp_drv.draw_buf = &draw_buf;
  lv_disp_drv_register(&disp_drv);

  create_ui();
}

// --- Main Loop ---
void loop() {
  if (!client.connected()) {
    reconnect();
  }
  client.loop();

  lv_timer_handler();
  delay(5);

  if (millis() - lastTempRead > 2000) {
    sensors.requestTemperatures();
    currentTemp = sensors.getTempFByIndex(0);
    update_ui();
    lastTempRead = millis();

    mqtt_publish_status();
  }

  if (millis() - lastSend > 5000) {
    sendRS485Packet();
    lastSend = millis();
  }
}
